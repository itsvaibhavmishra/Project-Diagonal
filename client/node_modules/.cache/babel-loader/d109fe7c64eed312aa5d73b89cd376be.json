{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs3/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime-corejs3/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime-corejs3/helpers/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = _Object$keys(object);\n\n  if (_Object$getOwnPropertySymbols) {\n    var symbols = _Object$getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = _filterInstanceProperty(symbols).call(symbols, function (sym) {\n        return _Object$getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      var _context21;\n\n      _forEachInstanceProperty(_context21 = ownKeys(Object(source), true)).call(_context21, function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (_Object$getOwnPropertyDescriptors) {\n      _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source));\n    } else {\n      var _context22;\n\n      _forEachInstanceProperty(_context22 = ownKeys(Object(source))).call(_context22, function (key) {\n        _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport _setInterval from \"@babel/runtime-corejs3/core-js-stable/set-interval\";\nimport _indexOfInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/index-of\";\nimport _spliceInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/splice\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _Date$now from \"@babel/runtime-corejs3/core-js-stable/date/now\";\nimport _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";\nimport _Object$keys from \"@babel/runtime-corejs3/core-js-stable/object/keys\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs3/core-js-stable/object/get-own-property-symbols\";\nimport _filterInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/filter\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs3/core-js-stable/object/get-own-property-descriptors\";\nimport _Object$defineProperties from \"@babel/runtime-corejs3/core-js-stable/object/define-properties\";\nimport _Object$defineProperty from \"@babel/runtime-corejs3/core-js-stable/object/define-property\";\nimport createEmotion from '@emotion/css/create-instance';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport createCSSKey from '../createCSSKey';\nimport createDebug from '../utils/debug';\nimport EventSpy from '../EventSpy';\nimport FunctionContext from './FunctionContext';\nimport InternalContext from './InternalContext';\nimport SpineTo from '../SpineTo';\nimport State1Context from './State1Context';\nimport State2Context from './State2Context';\nimport StateContext from './StateContext';\nimport styleConsole from '../utils/styleConsole';\nimport useStateRef from '../hooks/internal/useStateRef';\n\nvar DEFAULT_SCROLLER = function DEFAULT_SCROLLER() {\n  return Infinity;\n};\n\nvar MIN_CHECK_INTERVAL = 17; // 1 frame\n\nvar MODE_BOTTOM = 'bottom';\nvar MODE_TOP = 'top';\nvar NEAR_END_THRESHOLD = 1;\nvar SCROLL_DECISION_DURATION = 34; // 2 frames\n// We pool the emotion object by nonce.\n// This is to make sure we don't generate too many unneeded <style> tags.\n\nvar emotionPool = {};\n\nfunction setImmediateInterval(fn, ms) {\n  fn();\n  return _setInterval(fn, ms);\n}\n\nfunction computeViewState(_ref) {\n  var mode = _ref.mode,\n      _ref$target = _ref.target,\n      offsetHeight = _ref$target.offsetHeight,\n      scrollHeight = _ref$target.scrollHeight,\n      scrollTop = _ref$target.scrollTop;\n  var atBottom = scrollHeight - scrollTop - offsetHeight < NEAR_END_THRESHOLD;\n  var atTop = scrollTop < NEAR_END_THRESHOLD;\n  var atEnd = mode === MODE_TOP ? atTop : atBottom;\n  var atStart = mode !== MODE_TOP ? atTop : atBottom;\n  return {\n    atBottom: atBottom,\n    atEnd: atEnd,\n    atStart: atStart,\n    atTop: atTop\n  };\n}\n\nfunction isEnd(animateTo, mode) {\n  return animateTo === (mode === MODE_TOP ? 0 : '100%');\n}\n\nvar Composer = function Composer(_ref2) {\n  var checkInterval = _ref2.checkInterval,\n      children = _ref2.children,\n      debounce = _ref2.debounce,\n      debugFromProp = _ref2.debug,\n      initialScrollBehavior = _ref2.initialScrollBehavior,\n      mode = _ref2.mode,\n      nonce = _ref2.nonce,\n      scroller = _ref2.scroller;\n  var debug = useMemo(function () {\n    return createDebug(\"<ScrollToBottom>\", {\n      force: debugFromProp\n    });\n  }, [debugFromProp]);\n  mode = mode === MODE_TOP ? MODE_TOP : MODE_BOTTOM;\n  var ignoreScrollEventBeforeRef = useRef(0);\n  var initialScrollBehaviorRef = useRef(initialScrollBehavior);\n\n  var _useStateRef = useStateRef(mode === MODE_TOP ? 0 : '100%'),\n      _useStateRef2 = _slicedToArray(_useStateRef, 3),\n      animateTo = _useStateRef2[0],\n      setAnimateTo = _useStateRef2[1],\n      animateToRef = _useStateRef2[2];\n\n  var _useStateRef3 = useStateRef(null),\n      _useStateRef4 = _slicedToArray(_useStateRef3, 3),\n      target = _useStateRef4[0],\n      setTarget = _useStateRef4[1],\n      targetRef = _useStateRef4[2]; // Internal context\n\n\n  var animateFromRef = useRef(0);\n  var offsetHeightRef = useRef(0);\n  var scrollHeightRef = useRef(0); // State context\n\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      atBottom = _useState2[0],\n      setAtBottom = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      atEnd = _useState4[0],\n      setAtEnd = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      atTop = _useState6[0],\n      setAtTop = _useState6[1];\n\n  var _useState7 = useState(false),\n      _useState8 = _slicedToArray(_useState7, 2),\n      atStart = _useState8[0],\n      setAtStart = _useState8[1];\n\n  var _useStateRef5 = useStateRef(true),\n      _useStateRef6 = _slicedToArray(_useStateRef5, 3),\n      sticky = _useStateRef6[0],\n      setSticky = _useStateRef6[1],\n      stickyRef = _useStateRef6[2]; // High-rate state context\n\n\n  var scrollPositionObserversRef = useRef([]);\n  var observeScrollPosition = useCallback(function (fn) {\n    var target = targetRef.current;\n    scrollPositionObserversRef.current.push(fn);\n    target && fn({\n      scrollTop: target.scrollTop\n    });\n    return function () {\n      var scrollPositionObservers = scrollPositionObserversRef.current;\n\n      var index = _indexOfInstanceProperty(scrollPositionObservers).call(scrollPositionObservers, fn);\n\n      ~index && _spliceInstanceProperty(scrollPositionObservers).call(scrollPositionObservers, index, 1);\n    };\n  }, [scrollPositionObserversRef, targetRef]);\n  var handleSpineToEnd = useCallback(function () {\n    var animateTo = animateToRef.current;\n    debug(function () {\n      var _context;\n\n      return _concatInstanceProperty(_context = ['%cSpineTo%c: %conEnd%c is fired.']).call(_context, _toConsumableArray(styleConsole('magenta')), _toConsumableArray(styleConsole('orange')), [{\n        animateTo: animateTo\n      }]);\n    });\n    ignoreScrollEventBeforeRef.current = _Date$now(); // handleScrollEnd may end at a position which should lose stickiness.\n    // In that case, we will need to set sticky to false to stop the interval check.\n    // Test case:\n    // 1. Add a scroller that always return 0\n    // 2. Show a panel with mode === MODE_BOTTOM\n    // 3. Programmatically scroll to 0 (set element.scrollTop = 0)\n    // Expected: it should not repetitively call scrollTo(0)\n    //           it should set stickiness to false\n\n    isEnd(animateTo, mode) || setSticky(false);\n    setAnimateTo(null);\n  }, [animateToRef, debug, ignoreScrollEventBeforeRef, mode, setAnimateTo, setSticky]); // Function context\n\n  var scrollTo = useCallback(function (nextAnimateTo) {\n    var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        behavior = _ref3.behavior;\n\n    var target = targetRef.current;\n\n    if (typeof nextAnimateTo !== 'number' && nextAnimateTo !== '100%') {\n      return console.warn('react-scroll-to-bottom: Arguments passed to scrollTo() must be either number or \"100%\".');\n    } // If it is trying to scroll to a position which is not \"atEnd\", it should set sticky to false after scroll ended.\n\n\n    debug(function () {\n      var _context2;\n\n      return [_concatInstanceProperty(_context2 = [\"%cscrollTo%c: Will scroll to %c\".concat(typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/g, '%%'), \"%c\")]).call(_context2, _toConsumableArray(styleConsole('lime', '')), _toConsumableArray(styleConsole('purple'))), {\n        behavior: behavior,\n        nextAnimateTo: nextAnimateTo,\n        target: target\n      }];\n    });\n\n    if (behavior === 'auto') {\n      // Stop any existing animation\n      handleSpineToEnd();\n\n      if (target) {\n        // Jump to the scroll position\n        target.scrollTop = nextAnimateTo === '100%' ? target.scrollHeight - target.offsetHeight : nextAnimateTo;\n      }\n    } else {\n      behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollTo\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n      setAnimateTo(nextAnimateTo);\n    } // This is for handling a case. When calling scrollTo('100%', { behavior: 'auto' }) multiple times, it would lose stickiness.\n\n\n    if (isEnd(nextAnimateTo, mode)) {\n      debug(function () {\n        var _context3;\n\n        return [_concatInstanceProperty(_context3 = [\"%cscrollTo%c: Scrolling to end, will set sticky to %ctrue%c.\"]).call(_context3, _toConsumableArray(styleConsole('lime', '')), _toConsumableArray(styleConsole('purple'))), [{\n          mode: mode,\n          nextAnimateTo: nextAnimateTo\n        }]];\n      });\n      setSticky(true);\n    }\n  }, [debug, handleSpineToEnd, mode, setAnimateTo, setSticky, targetRef]);\n  var scrollToBottom = useCallback(function () {\n    var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref4.behavior;\n\n    debug(function () {\n      var _context4;\n\n      return _concatInstanceProperty(_context4 = ['%cscrollToBottom%c: Called']).call(_context4, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToBottom\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    scrollTo('100%', {\n      behavior: behavior || 'smooth'\n    });\n  }, [debug, scrollTo]);\n  var scrollToTop = useCallback(function () {\n    var _ref5 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref5.behavior;\n\n    debug(function () {\n      var _context5;\n\n      return _concatInstanceProperty(_context5 = ['%cscrollToTop%c: Called']).call(_context5, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToTop\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    scrollTo(0, {\n      behavior: behavior || 'smooth'\n    });\n  }, [debug, scrollTo]);\n  var scrollToEnd = useCallback(function () {\n    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref6.behavior;\n\n    debug(function () {\n      var _context6;\n\n      return _concatInstanceProperty(_context6 = ['%cscrollToEnd%c: Called']).call(_context6, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToEnd\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    var options = {\n      behavior: behavior || 'smooth'\n    };\n    mode === MODE_TOP ? scrollToTop(options) : scrollToBottom(options);\n  }, [debug, mode, scrollToBottom, scrollToTop]);\n  var scrollToStart = useCallback(function () {\n    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        behavior = _ref7.behavior;\n\n    debug(function () {\n      var _context7;\n\n      return _concatInstanceProperty(_context7 = ['%cscrollToStart%c: Called']).call(_context7, _toConsumableArray(styleConsole('yellow', '')));\n    });\n    behavior !== 'smooth' && console.warn('react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToStart\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.');\n    var options = {\n      behavior: behavior || 'smooth'\n    };\n    mode === MODE_TOP ? scrollToBottom(options) : scrollToTop(options);\n  }, [debug, mode, scrollToBottom, scrollToTop]);\n  var scrollToSticky = useCallback(function () {\n    var target = targetRef.current;\n\n    if (target) {\n      if (initialScrollBehaviorRef.current === 'auto') {\n        debug(function () {\n          var _context8;\n\n          return _concatInstanceProperty(_context8 = [\"%ctarget changed%c: Initial scroll\"]).call(_context8, _toConsumableArray(styleConsole('blue')));\n        });\n        target.scrollTop = mode === MODE_TOP ? 0 : target.scrollHeight - target.offsetHeight;\n        initialScrollBehaviorRef.current = false;\n        return;\n      } // This is very similar to scrollToEnd().\n      // Instead of scrolling to end, it will call props.scroller() to determines how far it should scroll.\n      // This function could be called while it is auto-scrolling.\n\n\n      var animateFrom = animateFromRef.current;\n      var offsetHeight = target.offsetHeight,\n          scrollHeight = target.scrollHeight,\n          scrollTop = target.scrollTop;\n      var maxValue = mode === MODE_TOP ? 0 : Math.max(0, scrollHeight - offsetHeight - scrollTop);\n      var minValue = Math.max(0, animateFrom - scrollTop);\n      var rawNextValue = scroller({\n        maxValue: maxValue,\n        minValue: minValue,\n        offsetHeight: offsetHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n      var nextValue = Math.max(0, Math.min(maxValue, rawNextValue));\n      var nextAnimateTo;\n\n      if (mode === MODE_TOP || nextValue !== maxValue) {\n        nextAnimateTo = scrollTop + nextValue;\n      } else {\n        // When scrolling to bottom, we should scroll to \"100%\".\n        // Otherwise, if we scroll to any number, it will lose stickiness when elements are adding too fast.\n        // \"100%\" is a special argument intended to make sure stickiness is not lost while new elements are being added.\n        nextAnimateTo = '100%';\n      }\n\n      debug(function () {\n        var _context9, _context10, _context11;\n\n        return [_concatInstanceProperty(_context9 = [_concatInstanceProperty(_context10 = _concatInstanceProperty(_context11 = \"%cscrollToSticky%c: Will animate from %c\".concat(animateFrom, \"px%c to %c\")).call(_context11, typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/g, '%%'), \"%c (%c\")).call(_context10, (nextAnimateTo === '100%' ? maxValue : nextAnimateTo) + animateFrom, \"px%c)\")]).call(_context9, _toConsumableArray(styleConsole('orange')), _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple'))), {\n          animateFrom: animateFrom,\n          maxValue: maxValue,\n          minValue: minValue,\n          nextAnimateTo: nextAnimateTo,\n          nextValue: nextValue,\n          offsetHeight: offsetHeight,\n          rawNextValue: rawNextValue,\n          scrollHeight: scrollHeight,\n          scrollTop: scrollTop\n        }];\n      });\n      scrollTo(nextAnimateTo, {\n        behavior: 'smooth'\n      });\n    }\n  }, [animateFromRef, debug, mode, scroller, scrollTo, targetRef]);\n  var handleScroll = useCallback(function (_ref8) {\n    var _context17;\n\n    var timeStampLow = _ref8.timeStampLow;\n    var animateTo = animateToRef.current;\n    var target = targetRef.current;\n    var animating = animateTo !== null; // Currently, there are no reliable way to check if the \"scroll\" event is trigger due to\n    // user gesture, programmatic scrolling, or Chrome-synthesized \"scroll\" event to compensate size change.\n    // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.\n\n    if (timeStampLow <= ignoreScrollEventBeforeRef.current || !target) {\n      // Since we debounce \"scroll\" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).\n      // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.\n      // Thus, on a fast machine, adding elements super fast will lose the \"stickiness\".\n      return;\n    }\n\n    var _computeViewState = computeViewState({\n      mode: mode,\n      target: target\n    }),\n        atBottom = _computeViewState.atBottom,\n        atEnd = _computeViewState.atEnd,\n        atStart = _computeViewState.atStart,\n        atTop = _computeViewState.atTop;\n\n    setAtBottom(atBottom);\n    setAtEnd(atEnd);\n    setAtStart(atStart);\n    setAtTop(atTop); // Chrome will emit \"synthetic\" scroll event if the container is resized or an element is added\n    // We need to ignore these \"synthetic\" events\n    // Repro: In playground, press 4-1-5-1-1 (small, add one, normal, add one, add one)\n    //        Nomatter how fast or slow the sequence is being pressed, it should still stick to the bottom\n\n    var nextOffsetHeight = target.offsetHeight,\n        nextScrollHeight = target.scrollHeight;\n    var offsetHeight = offsetHeightRef.current;\n    var scrollHeight = scrollHeightRef.current;\n    var offsetHeightChanged = nextOffsetHeight !== offsetHeight;\n    var scrollHeightChanged = nextScrollHeight !== scrollHeight;\n\n    if (offsetHeightChanged) {\n      offsetHeightRef.current = nextOffsetHeight;\n    }\n\n    if (scrollHeightChanged) {\n      scrollHeightRef.current = nextScrollHeight;\n    } // Sticky means:\n    // - If it is scrolled programatically, we are still in sticky mode\n    // - If it is scrolled by the user, then sticky means if we are at the end\n    // Only update stickiness if the scroll event is not due to synthetic scroll done by Chrome\n\n\n    if (!offsetHeightChanged && !scrollHeightChanged) {\n      // We are sticky if we are animating to the end, or we are already at the end.\n      // We can be \"animating but not sticky\" by calling \"scrollTo(100)\" where the container scrollHeight is 200px.\n      var nextSticky = animating && isEnd(animateTo, mode) || atEnd;\n\n      if (stickyRef.current !== nextSticky) {\n        debug(function () {\n          var _context12, _context13, _context14, _context15;\n\n          return [_concatInstanceProperty(_context12 = [\"%conScroll%c: %csetSticky%c(%c\".concat(nextSticky, \"%c)\")]).call(_context12, _toConsumableArray(styleConsole('red')), _toConsumableArray(styleConsole('red')), _toConsumableArray(styleConsole('purple'))), _concatInstanceProperty(_context13 = [_concatInstanceProperty(_context14 = _concatInstanceProperty(_context15 = \"(animating = %c\".concat(animating, \"%c && isEnd = %c\")).call(_context15, isEnd(animateTo, mode), \"%c) || atEnd = %c\")).call(_context14, atEnd, \"%c\")]).call(_context13, _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple')), _toConsumableArray(styleConsole('purple')), [{\n            animating: animating,\n            animateTo: animateTo,\n            atEnd: atEnd,\n            mode: mode,\n            offsetHeight: target.offsetHeight,\n            scrollHeight: target.scrollHeight,\n            sticky: stickyRef.current,\n            nextSticky: nextSticky\n          }])];\n        });\n        setSticky(nextSticky);\n      }\n    } else if (stickyRef.current) {\n      debug(function () {\n        var _context16;\n\n        return [_concatInstanceProperty(_context16 = [\"%conScroll%c: Size changed while sticky, calling %cscrollToSticky()%c\"]).call(_context16, _toConsumableArray(styleConsole('red')), _toConsumableArray(styleConsole('orange')), [{\n          offsetHeightChanged: offsetHeightChanged,\n          scrollHeightChanged: scrollHeightChanged\n        }]), {\n          nextOffsetHeight: nextOffsetHeight,\n          prevOffsetHeight: offsetHeight,\n          nextScrollHeight: nextScrollHeight,\n          prevScrollHeight: scrollHeight\n        }];\n      });\n      scrollToSticky();\n    }\n\n    var actualScrollTop = target.scrollTop;\n\n    _forEachInstanceProperty(_context17 = scrollPositionObserversRef.current).call(_context17, function (observer) {\n      return observer({\n        scrollTop: actualScrollTop\n      });\n    });\n  }, [animateToRef, debug, ignoreScrollEventBeforeRef, mode, offsetHeightRef, scrollHeightRef, scrollPositionObserversRef, scrollToSticky, setAtBottom, setAtEnd, setAtStart, setAtTop, setSticky, stickyRef, targetRef]);\n  useEffect(function () {\n    if (target) {\n      var stickyButNotAtEndSince = false;\n      var timeout = setImmediateInterval(function () {\n        var target = targetRef.current;\n        var animating = animateToRef.current !== null;\n\n        if (stickyRef.current) {\n          if (!computeViewState({\n            mode: mode,\n            target: target\n          }).atEnd) {\n            if (!stickyButNotAtEndSince) {\n              stickyButNotAtEndSince = _Date$now();\n            } else if (_Date$now() - stickyButNotAtEndSince > SCROLL_DECISION_DURATION) {\n              // Quirks: In Firefox, after user scroll down, Firefox do two things:\n              //         1. Set to a new \"scrollTop\"\n              //         2. Fire \"scroll\" event\n              //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.\n              //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.\n              // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.\n              // The \"animating\" check will make sure stickiness is not lost when elements are adding at a very fast pace.\n              if (!animating) {\n                animateFromRef.current = target.scrollTop;\n                debug(function () {\n                  var _context18;\n\n                  return _concatInstanceProperty(_context18 = [\"%cInterval check%c: Should sticky but not at end, calling %cscrollToSticky()%c to scroll\"]).call(_context18, _toConsumableArray(styleConsole('navy')), _toConsumableArray(styleConsole('orange')));\n                });\n                scrollToSticky();\n              }\n\n              stickyButNotAtEndSince = false;\n            }\n          } else {\n            stickyButNotAtEndSince = false;\n          }\n        } else if (target.scrollHeight <= target.offsetHeight && !stickyRef.current) {\n          // When the container is emptied, we will set sticky back to true.\n          debug(function () {\n            var _context19;\n\n            return [_concatInstanceProperty(_context19 = [\"%cInterval check%c: Container is emptied, setting sticky back to %ctrue%c\"]).call(_context19, _toConsumableArray(styleConsole('navy')), _toConsumableArray(styleConsole('purple'))), [{\n              offsetHeight: target.offsetHeight,\n              scrollHeight: target.scrollHeight,\n              sticky: stickyRef.current\n            }]];\n          });\n          setSticky(true);\n        }\n      }, Math.max(MIN_CHECK_INTERVAL, checkInterval) || MIN_CHECK_INTERVAL);\n      return function () {\n        return clearInterval(timeout);\n      };\n    }\n  }, [animateToRef, checkInterval, debug, mode, scrollToSticky, setSticky, stickyRef, target, targetRef]);\n  var styleToClassName = useMemo(function () {\n    var emotion = emotionPool[nonce] || (emotionPool[nonce] = createEmotion({\n      key: 'react-scroll-to-bottom--css-' + createCSSKey(),\n      nonce: nonce\n    }));\n    return function (style) {\n      return emotion.css(style) + '';\n    };\n  }, [nonce]);\n  var internalContext = useMemo(function () {\n    return {\n      observeScrollPosition: observeScrollPosition,\n      setTarget: setTarget,\n      styleToClassName: styleToClassName\n    };\n  }, [observeScrollPosition, setTarget, styleToClassName]);\n  var state1Context = useMemo(function () {\n    return {\n      atBottom: atBottom,\n      atEnd: atEnd,\n      atStart: atStart,\n      atTop: atTop,\n      mode: mode\n    };\n  }, [atBottom, atEnd, atStart, atTop, mode]);\n  var state2Context = useMemo(function () {\n    var animating = animateTo !== null;\n    return {\n      animating: animating,\n      animatingToEnd: animating && isEnd(animateTo, mode),\n      sticky: sticky\n    };\n  }, [animateTo, mode, sticky]);\n  var combinedStateContext = useMemo(function () {\n    return _objectSpread(_objectSpread({}, state1Context), state2Context);\n  }, [state1Context, state2Context]);\n  var functionContext = useMemo(function () {\n    return {\n      scrollTo: scrollTo,\n      scrollToBottom: scrollToBottom,\n      scrollToEnd: scrollToEnd,\n      scrollToStart: scrollToStart,\n      scrollToTop: scrollToTop\n    };\n  }, [scrollTo, scrollToBottom, scrollToEnd, scrollToStart, scrollToTop]);\n  useEffect(function () {\n    // We need to update the \"scrollHeight\" value to latest when the user do a focus inside the box.\n    //\n    // This is because:\n    // - In our code that mitigate Chrome synthetic scrolling, that code will look at whether \"scrollHeight\" value is latest or not.\n    // - That code only run on \"scroll\" event.\n    // - That means, on every \"scroll\" event, if the \"scrollHeight\" value is not latest, we will skip modifying the stickiness.\n    // - That means, if the user \"focus\" to an element that cause the scroll view to scroll to the bottom, the user agent will fire \"scroll\" event.\n    //   Since the \"scrollHeight\" is not latest value, this \"scroll\" event will be ignored and stickiness will not be modified.\n    // - That means, if the user \"focus\" to a newly added element that is at the end of the scroll view, the \"scroll to bottom\" button will continue to show.\n    //\n    // Repro in Chrome:\n    // 1. Fill up a scroll view\n    // 2. Scroll up, the \"scroll to bottom\" button should show up\n    // 3. Click \"Add a button\"\n    // 4. Click on the scroll view (to pseudo-focus on it)\n    // 5. Press TAB, the scroll view will be at the bottom\n    //\n    // Expect:\n    // - The \"scroll to bottom\" button should be gone.\n    if (target) {\n      var handleFocus = function handleFocus() {\n        scrollHeightRef.current = target.scrollHeight;\n      };\n\n      target.addEventListener('focus', handleFocus, {\n        capture: true,\n        passive: true\n      });\n      return function () {\n        return target.removeEventListener('focus', handleFocus);\n      };\n    }\n  }, [target]);\n  debug(function () {\n    var _context20;\n\n    return [_concatInstanceProperty(_context20 = [\"%cRender%c: Render\"]).call(_context20, _toConsumableArray(styleConsole('cyan', ''))), {\n      animateTo: animateTo,\n      animating: animateTo !== null,\n      sticky: sticky,\n      target: target\n    }];\n  });\n  return /*#__PURE__*/React.createElement(InternalContext.Provider, {\n    value: internalContext\n  }, /*#__PURE__*/React.createElement(FunctionContext.Provider, {\n    value: functionContext\n  }, /*#__PURE__*/React.createElement(StateContext.Provider, {\n    value: combinedStateContext\n  }, /*#__PURE__*/React.createElement(State1Context.Provider, {\n    value: state1Context\n  }, /*#__PURE__*/React.createElement(State2Context.Provider, {\n    value: state2Context\n  }, children, target && /*#__PURE__*/React.createElement(EventSpy, {\n    debounce: debounce,\n    name: \"scroll\",\n    onEvent: handleScroll,\n    target: target\n  }), target && animateTo !== null && /*#__PURE__*/React.createElement(SpineTo, {\n    name: \"scrollTop\",\n    onEnd: handleSpineToEnd,\n    target: target,\n    value: animateTo\n  }))))));\n};\n\nComposer.defaultProps = {\n  checkInterval: 100,\n  children: undefined,\n  debounce: 17,\n  debug: undefined,\n  initialScrollBehavior: 'smooth',\n  mode: undefined,\n  nonce: undefined,\n  scroller: DEFAULT_SCROLLER\n};\nComposer.propTypes = {\n  checkInterval: PropTypes.number,\n  children: PropTypes.any,\n  debounce: PropTypes.number,\n  debug: PropTypes.bool,\n  initialScrollBehavior: PropTypes.oneOf(['auto', 'smooth']),\n  mode: PropTypes.oneOf(['bottom', 'top']),\n  nonce: PropTypes.string,\n  scroller: PropTypes.func\n};\nexport default Composer;","map":{"version":3,"mappings":"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","names":["createEmotion","PropTypes","React","useCallback","useEffect","useMemo","useRef","useState","createCSSKey","createDebug","EventSpy","FunctionContext","InternalContext","SpineTo","State1Context","State2Context","StateContext","styleConsole","useStateRef","DEFAULT_SCROLLER","Infinity","MIN_CHECK_INTERVAL","MODE_BOTTOM","MODE_TOP","NEAR_END_THRESHOLD","SCROLL_DECISION_DURATION","emotionPool","setImmediateInterval","fn","ms","_setInterval","computeViewState","mode","target","offsetHeight","scrollHeight","scrollTop","atBottom","atTop","atEnd","atStart","isEnd","animateTo","Composer","checkInterval","children","debounce","debugFromProp","debug","initialScrollBehavior","nonce","scroller","force","ignoreScrollEventBeforeRef","initialScrollBehaviorRef","setAnimateTo","animateToRef","setTarget","targetRef","animateFromRef","offsetHeightRef","scrollHeightRef","setAtBottom","setAtEnd","setAtTop","setAtStart","sticky","setSticky","stickyRef","scrollPositionObserversRef","observeScrollPosition","current","push","scrollPositionObservers","index","_indexOfInstanceProperty","call","_spliceInstanceProperty","handleSpineToEnd","_Date$now","scrollTo","nextAnimateTo","behavior","console","warn","replace","scrollToBottom","scrollToTop","scrollToEnd","options","scrollToStart","scrollToSticky","animateFrom","maxValue","Math","max","minValue","rawNextValue","nextValue","min","handleScroll","timeStampLow","animating","nextOffsetHeight","nextScrollHeight","offsetHeightChanged","scrollHeightChanged","nextSticky","prevOffsetHeight","prevScrollHeight","actualScrollTop","_forEachInstanceProperty","observer","stickyButNotAtEndSince","timeout","clearInterval","styleToClassName","emotion","key","css","style","internalContext","state1Context","state2Context","animatingToEnd","combinedStateContext","functionContext","handleFocus","addEventListener","capture","passive","removeEventListener","Provider","value","name","onEvent","onEnd","defaultProps","undefined","propTypes","number","any","bool","oneOf","string","func"],"sources":["D:\\More\\Projects\\Project-Diagonal\\client\\node_modules\\react-scroll-to-bottom\\src\\ScrollToBottom\\Composer.js"],"sourcesContent":["import createEmotion from '@emotion/css/create-instance';\nimport PropTypes from 'prop-types';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\n\nimport createCSSKey from '../createCSSKey';\nimport createDebug from '../utils/debug';\nimport EventSpy from '../EventSpy';\nimport FunctionContext from './FunctionContext';\nimport InternalContext from './InternalContext';\nimport SpineTo from '../SpineTo';\nimport State1Context from './State1Context';\nimport State2Context from './State2Context';\nimport StateContext from './StateContext';\nimport styleConsole from '../utils/styleConsole';\nimport useStateRef from '../hooks/internal/useStateRef';\n\nconst DEFAULT_SCROLLER = () => Infinity;\nconst MIN_CHECK_INTERVAL = 17; // 1 frame\nconst MODE_BOTTOM = 'bottom';\nconst MODE_TOP = 'top';\nconst NEAR_END_THRESHOLD = 1;\nconst SCROLL_DECISION_DURATION = 34; // 2 frames\n\n// We pool the emotion object by nonce.\n// This is to make sure we don't generate too many unneeded <style> tags.\nconst emotionPool = {};\n\nfunction setImmediateInterval(fn, ms) {\n  fn();\n\n  return setInterval(fn, ms);\n}\n\nfunction computeViewState({ mode, target: { offsetHeight, scrollHeight, scrollTop } }) {\n  const atBottom = scrollHeight - scrollTop - offsetHeight < NEAR_END_THRESHOLD;\n  const atTop = scrollTop < NEAR_END_THRESHOLD;\n\n  const atEnd = mode === MODE_TOP ? atTop : atBottom;\n  const atStart = mode !== MODE_TOP ? atTop : atBottom;\n\n  return {\n    atBottom,\n    atEnd,\n    atStart,\n    atTop\n  };\n}\n\nfunction isEnd(animateTo, mode) {\n  return animateTo === (mode === MODE_TOP ? 0 : '100%');\n}\n\nconst Composer = ({\n  checkInterval,\n  children,\n  debounce,\n  debug: debugFromProp,\n  initialScrollBehavior,\n  mode,\n  nonce,\n  scroller\n}) => {\n  const debug = useMemo(() => createDebug(`<ScrollToBottom>`, { force: debugFromProp }), [debugFromProp]);\n\n  mode = mode === MODE_TOP ? MODE_TOP : MODE_BOTTOM;\n\n  const ignoreScrollEventBeforeRef = useRef(0);\n  const initialScrollBehaviorRef = useRef(initialScrollBehavior);\n  const [animateTo, setAnimateTo, animateToRef] = useStateRef(mode === MODE_TOP ? 0 : '100%');\n  const [target, setTarget, targetRef] = useStateRef(null);\n\n  // Internal context\n  const animateFromRef = useRef(0);\n  const offsetHeightRef = useRef(0);\n  const scrollHeightRef = useRef(0);\n\n  // State context\n  const [atBottom, setAtBottom] = useState(true);\n  const [atEnd, setAtEnd] = useState(true);\n  const [atTop, setAtTop] = useState(true);\n  const [atStart, setAtStart] = useState(false);\n  const [sticky, setSticky, stickyRef] = useStateRef(true);\n\n  // High-rate state context\n  const scrollPositionObserversRef = useRef([]);\n  const observeScrollPosition = useCallback(\n    fn => {\n      const { current: target } = targetRef;\n\n      scrollPositionObserversRef.current.push(fn);\n      target && fn({ scrollTop: target.scrollTop });\n\n      return () => {\n        const { current: scrollPositionObservers } = scrollPositionObserversRef;\n        const index = scrollPositionObservers.indexOf(fn);\n\n        ~index && scrollPositionObservers.splice(index, 1);\n      };\n    },\n    [scrollPositionObserversRef, targetRef]\n  );\n\n  const handleSpineToEnd = useCallback(() => {\n    const { current: animateTo } = animateToRef;\n\n    debug(() => [\n      '%cSpineTo%c: %conEnd%c is fired.',\n      ...styleConsole('magenta'),\n      ...styleConsole('orange'),\n      { animateTo }\n    ]);\n\n    ignoreScrollEventBeforeRef.current = Date.now();\n\n    // handleScrollEnd may end at a position which should lose stickiness.\n    // In that case, we will need to set sticky to false to stop the interval check.\n    // Test case:\n    // 1. Add a scroller that always return 0\n    // 2. Show a panel with mode === MODE_BOTTOM\n    // 3. Programmatically scroll to 0 (set element.scrollTop = 0)\n    // Expected: it should not repetitively call scrollTo(0)\n    //           it should set stickiness to false\n\n    isEnd(animateTo, mode) || setSticky(false);\n    setAnimateTo(null);\n  }, [animateToRef, debug, ignoreScrollEventBeforeRef, mode, setAnimateTo, setSticky]);\n\n  // Function context\n  const scrollTo = useCallback(\n    (nextAnimateTo, { behavior } = {}) => {\n      const { current: target } = targetRef;\n\n      if (typeof nextAnimateTo !== 'number' && nextAnimateTo !== '100%') {\n        return console.warn('react-scroll-to-bottom: Arguments passed to scrollTo() must be either number or \"100%\".');\n      }\n\n      // If it is trying to scroll to a position which is not \"atEnd\", it should set sticky to false after scroll ended.\n\n      debug(() => [\n        [\n          `%cscrollTo%c: Will scroll to %c${\n            typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/gu, '%%')\n          }%c`,\n          ...styleConsole('lime', ''),\n          ...styleConsole('purple')\n        ],\n        {\n          behavior,\n          nextAnimateTo,\n          target\n        }\n      ]);\n\n      if (behavior === 'auto') {\n        // Stop any existing animation\n        handleSpineToEnd();\n\n        if (target) {\n          // Jump to the scroll position\n          target.scrollTop = nextAnimateTo === '100%' ? target.scrollHeight - target.offsetHeight : nextAnimateTo;\n        }\n      } else {\n        behavior !== 'smooth' &&\n          console.warn(\n            'react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollTo\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.'\n          );\n\n        setAnimateTo(nextAnimateTo);\n      }\n\n      // This is for handling a case. When calling scrollTo('100%', { behavior: 'auto' }) multiple times, it would lose stickiness.\n      if (isEnd(nextAnimateTo, mode)) {\n        debug(() => [\n          [\n            `%cscrollTo%c: Scrolling to end, will set sticky to %ctrue%c.`,\n            ...styleConsole('lime', ''),\n            ...styleConsole('purple')\n          ],\n          [{ mode, nextAnimateTo }]\n        ]);\n\n        setSticky(true);\n      }\n    },\n    [debug, handleSpineToEnd, mode, setAnimateTo, setSticky, targetRef]\n  );\n\n  const scrollToBottom = useCallback(\n    ({ behavior } = {}) => {\n      debug(() => ['%cscrollToBottom%c: Called', ...styleConsole('yellow', '')]);\n\n      behavior !== 'smooth' &&\n        console.warn(\n          'react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToBottom\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.'\n        );\n\n      scrollTo('100%', { behavior: behavior || 'smooth' });\n    },\n    [debug, scrollTo]\n  );\n\n  const scrollToTop = useCallback(\n    ({ behavior } = {}) => {\n      debug(() => ['%cscrollToTop%c: Called', ...styleConsole('yellow', '')]);\n\n      behavior !== 'smooth' &&\n        console.warn(\n          'react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToTop\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.'\n        );\n\n      scrollTo(0, { behavior: behavior || 'smooth' });\n    },\n    [debug, scrollTo]\n  );\n\n  const scrollToEnd = useCallback(\n    ({ behavior } = {}) => {\n      debug(() => ['%cscrollToEnd%c: Called', ...styleConsole('yellow', '')]);\n\n      behavior !== 'smooth' &&\n        console.warn(\n          'react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToEnd\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.'\n        );\n\n      const options = { behavior: behavior || 'smooth' };\n\n      mode === MODE_TOP ? scrollToTop(options) : scrollToBottom(options);\n    },\n    [debug, mode, scrollToBottom, scrollToTop]\n  );\n\n  const scrollToStart = useCallback(\n    ({ behavior } = {}) => {\n      debug(() => ['%cscrollToStart%c: Called', ...styleConsole('yellow', '')]);\n\n      behavior !== 'smooth' &&\n        console.warn(\n          'react-scroll-to-bottom: Please set \"behavior\" when calling \"scrollToStart\". In future versions, the default behavior will be changed from smooth scrolling to discrete scrolling to align with HTML Standard.'\n        );\n\n      const options = { behavior: behavior || 'smooth' };\n\n      mode === MODE_TOP ? scrollToBottom(options) : scrollToTop(options);\n    },\n    [debug, mode, scrollToBottom, scrollToTop]\n  );\n\n  const scrollToSticky = useCallback(() => {\n    const { current: target } = targetRef;\n\n    if (target) {\n      if (initialScrollBehaviorRef.current === 'auto') {\n        debug(() => [`%ctarget changed%c: Initial scroll`, ...styleConsole('blue')]);\n\n        target.scrollTop = mode === MODE_TOP ? 0 : target.scrollHeight - target.offsetHeight;\n        initialScrollBehaviorRef.current = false;\n\n        return;\n      }\n\n      // This is very similar to scrollToEnd().\n      // Instead of scrolling to end, it will call props.scroller() to determines how far it should scroll.\n      // This function could be called while it is auto-scrolling.\n\n      const { current: animateFrom } = animateFromRef;\n      const { offsetHeight, scrollHeight, scrollTop } = target;\n\n      const maxValue = mode === MODE_TOP ? 0 : Math.max(0, scrollHeight - offsetHeight - scrollTop);\n      const minValue = Math.max(0, animateFrom - scrollTop);\n\n      const rawNextValue = scroller({ maxValue, minValue, offsetHeight, scrollHeight, scrollTop });\n\n      const nextValue = Math.max(0, Math.min(maxValue, rawNextValue));\n\n      let nextAnimateTo;\n\n      if (mode === MODE_TOP || nextValue !== maxValue) {\n        nextAnimateTo = scrollTop + nextValue;\n      } else {\n        // When scrolling to bottom, we should scroll to \"100%\".\n        // Otherwise, if we scroll to any number, it will lose stickiness when elements are adding too fast.\n        // \"100%\" is a special argument intended to make sure stickiness is not lost while new elements are being added.\n        nextAnimateTo = '100%';\n      }\n\n      debug(() => [\n        [\n          `%cscrollToSticky%c: Will animate from %c${animateFrom}px%c to %c${\n            typeof nextAnimateTo === 'number' ? nextAnimateTo + 'px' : nextAnimateTo.replace(/%/gu, '%%')\n          }%c (%c${(nextAnimateTo === '100%' ? maxValue : nextAnimateTo) + animateFrom}px%c)`,\n          ...styleConsole('orange'),\n          ...styleConsole('purple'),\n          ...styleConsole('purple'),\n          ...styleConsole('purple')\n        ],\n        {\n          animateFrom,\n          maxValue,\n          minValue,\n          nextAnimateTo,\n          nextValue,\n          offsetHeight,\n          rawNextValue,\n          scrollHeight,\n          scrollTop\n        }\n      ]);\n\n      scrollTo(nextAnimateTo, { behavior: 'smooth' });\n    }\n  }, [animateFromRef, debug, mode, scroller, scrollTo, targetRef]);\n\n  const handleScroll = useCallback(\n    ({ timeStampLow }) => {\n      const { current: animateTo } = animateToRef;\n      const { current: target } = targetRef;\n\n      const animating = animateTo !== null;\n\n      // Currently, there are no reliable way to check if the \"scroll\" event is trigger due to\n      // user gesture, programmatic scrolling, or Chrome-synthesized \"scroll\" event to compensate size change.\n      // Thus, we use our best-effort to guess if it is triggered by user gesture, and disable sticky if it is heading towards the start direction.\n\n      if (timeStampLow <= ignoreScrollEventBeforeRef.current || !target) {\n        // Since we debounce \"scroll\" event, this handler might be called after spineTo.onEnd (a.k.a. artificial scrolling).\n        // We should ignore debounced event fired after scrollEnd, because without skipping them, the userInitiatedScroll calculated below will not be accurate.\n        // Thus, on a fast machine, adding elements super fast will lose the \"stickiness\".\n\n        return;\n      }\n\n      const { atBottom, atEnd, atStart, atTop } = computeViewState({ mode, target });\n\n      setAtBottom(atBottom);\n      setAtEnd(atEnd);\n      setAtStart(atStart);\n      setAtTop(atTop);\n\n      // Chrome will emit \"synthetic\" scroll event if the container is resized or an element is added\n      // We need to ignore these \"synthetic\" events\n      // Repro: In playground, press 4-1-5-1-1 (small, add one, normal, add one, add one)\n      //        Nomatter how fast or slow the sequence is being pressed, it should still stick to the bottom\n      const { offsetHeight: nextOffsetHeight, scrollHeight: nextScrollHeight } = target;\n      const { current: offsetHeight } = offsetHeightRef;\n      const { current: scrollHeight } = scrollHeightRef;\n      const offsetHeightChanged = nextOffsetHeight !== offsetHeight;\n      const scrollHeightChanged = nextScrollHeight !== scrollHeight;\n\n      if (offsetHeightChanged) {\n        offsetHeightRef.current = nextOffsetHeight;\n      }\n\n      if (scrollHeightChanged) {\n        scrollHeightRef.current = nextScrollHeight;\n      }\n\n      // Sticky means:\n      // - If it is scrolled programatically, we are still in sticky mode\n      // - If it is scrolled by the user, then sticky means if we are at the end\n\n      // Only update stickiness if the scroll event is not due to synthetic scroll done by Chrome\n      if (!offsetHeightChanged && !scrollHeightChanged) {\n        // We are sticky if we are animating to the end, or we are already at the end.\n        // We can be \"animating but not sticky\" by calling \"scrollTo(100)\" where the container scrollHeight is 200px.\n        const nextSticky = (animating && isEnd(animateTo, mode)) || atEnd;\n\n        if (stickyRef.current !== nextSticky) {\n          debug(() => [\n            [\n              `%conScroll%c: %csetSticky%c(%c${nextSticky}%c)`,\n              ...styleConsole('red'),\n              ...styleConsole('red'),\n              ...styleConsole('purple')\n            ],\n            [\n              `(animating = %c${animating}%c && isEnd = %c${isEnd(animateTo, mode)}%c) || atEnd = %c${atEnd}%c`,\n              ...styleConsole('purple'),\n              ...styleConsole('purple'),\n              ...styleConsole('purple'),\n              {\n                animating,\n                animateTo,\n                atEnd,\n                mode,\n                offsetHeight: target.offsetHeight,\n                scrollHeight: target.scrollHeight,\n                sticky: stickyRef.current,\n                nextSticky\n              }\n            ]\n          ]);\n\n          setSticky(nextSticky);\n        }\n      } else if (stickyRef.current) {\n        debug(() => [\n          [\n            `%conScroll%c: Size changed while sticky, calling %cscrollToSticky()%c`,\n            ...styleConsole('red'),\n            ...styleConsole('orange'),\n            {\n              offsetHeightChanged,\n              scrollHeightChanged\n            }\n          ],\n          {\n            nextOffsetHeight,\n            prevOffsetHeight: offsetHeight,\n            nextScrollHeight,\n            prevScrollHeight: scrollHeight\n          }\n        ]);\n\n        scrollToSticky();\n      }\n\n      const { scrollTop: actualScrollTop } = target;\n\n      scrollPositionObserversRef.current.forEach(observer => observer({ scrollTop: actualScrollTop }));\n    },\n    [\n      animateToRef,\n      debug,\n      ignoreScrollEventBeforeRef,\n      mode,\n      offsetHeightRef,\n      scrollHeightRef,\n      scrollPositionObserversRef,\n      scrollToSticky,\n      setAtBottom,\n      setAtEnd,\n      setAtStart,\n      setAtTop,\n      setSticky,\n      stickyRef,\n      targetRef\n    ]\n  );\n\n  useEffect(() => {\n    if (target) {\n      let stickyButNotAtEndSince = false;\n\n      const timeout = setImmediateInterval(() => {\n        const { current: target } = targetRef;\n        const animating = animateToRef.current !== null;\n\n        if (stickyRef.current) {\n          if (!computeViewState({ mode, target }).atEnd) {\n            if (!stickyButNotAtEndSince) {\n              stickyButNotAtEndSince = Date.now();\n            } else if (Date.now() - stickyButNotAtEndSince > SCROLL_DECISION_DURATION) {\n              // Quirks: In Firefox, after user scroll down, Firefox do two things:\n              //         1. Set to a new \"scrollTop\"\n              //         2. Fire \"scroll\" event\n              //         For what we observed, #1 is fired about 20ms before #2. There is a chance that this stickyCheckTimeout is being scheduled between 1 and 2.\n              //         That means, if we just look at #1 to decide if we should scroll, we will always scroll, in oppose to the user's intention.\n              // Repro: Open Firefox, set checkInterval to a lower number, and try to scroll by dragging the scroll handler. It will jump back.\n\n              // The \"animating\" check will make sure stickiness is not lost when elements are adding at a very fast pace.\n              if (!animating) {\n                animateFromRef.current = target.scrollTop;\n\n                debug(() => [\n                  `%cInterval check%c: Should sticky but not at end, calling %cscrollToSticky()%c to scroll`,\n                  ...styleConsole('navy'),\n                  ...styleConsole('orange')\n                ]);\n\n                scrollToSticky();\n              }\n\n              stickyButNotAtEndSince = false;\n            }\n          } else {\n            stickyButNotAtEndSince = false;\n          }\n        } else if (target.scrollHeight <= target.offsetHeight && !stickyRef.current) {\n          // When the container is emptied, we will set sticky back to true.\n\n          debug(() => [\n            [\n              `%cInterval check%c: Container is emptied, setting sticky back to %ctrue%c`,\n              ...styleConsole('navy'),\n              ...styleConsole('purple')\n            ],\n            [\n              {\n                offsetHeight: target.offsetHeight,\n                scrollHeight: target.scrollHeight,\n                sticky: stickyRef.current\n              }\n            ]\n          ]);\n\n          setSticky(true);\n        }\n      }, Math.max(MIN_CHECK_INTERVAL, checkInterval) || MIN_CHECK_INTERVAL);\n\n      return () => clearInterval(timeout);\n    }\n  }, [animateToRef, checkInterval, debug, mode, scrollToSticky, setSticky, stickyRef, target, targetRef]);\n\n  const styleToClassName = useMemo(() => {\n    const emotion =\n      emotionPool[nonce] ||\n      (emotionPool[nonce] = createEmotion({ key: 'react-scroll-to-bottom--css-' + createCSSKey(), nonce }));\n\n    return style => emotion.css(style) + '';\n  }, [nonce]);\n\n  const internalContext = useMemo(\n    () => ({\n      observeScrollPosition,\n      setTarget,\n      styleToClassName\n    }),\n    [observeScrollPosition, setTarget, styleToClassName]\n  );\n\n  const state1Context = useMemo(\n    () => ({\n      atBottom,\n      atEnd,\n      atStart,\n      atTop,\n      mode\n    }),\n    [atBottom, atEnd, atStart, atTop, mode]\n  );\n\n  const state2Context = useMemo(() => {\n    const animating = animateTo !== null;\n\n    return {\n      animating,\n      animatingToEnd: animating && isEnd(animateTo, mode),\n      sticky\n    };\n  }, [animateTo, mode, sticky]);\n\n  const combinedStateContext = useMemo(\n    () => ({\n      ...state1Context,\n      ...state2Context\n    }),\n    [state1Context, state2Context]\n  );\n\n  const functionContext = useMemo(\n    () => ({\n      scrollTo,\n      scrollToBottom,\n      scrollToEnd,\n      scrollToStart,\n      scrollToTop\n    }),\n    [scrollTo, scrollToBottom, scrollToEnd, scrollToStart, scrollToTop]\n  );\n\n  useEffect(() => {\n    // We need to update the \"scrollHeight\" value to latest when the user do a focus inside the box.\n    //\n    // This is because:\n    // - In our code that mitigate Chrome synthetic scrolling, that code will look at whether \"scrollHeight\" value is latest or not.\n    // - That code only run on \"scroll\" event.\n    // - That means, on every \"scroll\" event, if the \"scrollHeight\" value is not latest, we will skip modifying the stickiness.\n    // - That means, if the user \"focus\" to an element that cause the scroll view to scroll to the bottom, the user agent will fire \"scroll\" event.\n    //   Since the \"scrollHeight\" is not latest value, this \"scroll\" event will be ignored and stickiness will not be modified.\n    // - That means, if the user \"focus\" to a newly added element that is at the end of the scroll view, the \"scroll to bottom\" button will continue to show.\n    //\n    // Repro in Chrome:\n    // 1. Fill up a scroll view\n    // 2. Scroll up, the \"scroll to bottom\" button should show up\n    // 3. Click \"Add a button\"\n    // 4. Click on the scroll view (to pseudo-focus on it)\n    // 5. Press TAB, the scroll view will be at the bottom\n    //\n    // Expect:\n    // - The \"scroll to bottom\" button should be gone.\n    if (target) {\n      const handleFocus = () => {\n        scrollHeightRef.current = target.scrollHeight;\n      };\n\n      target.addEventListener('focus', handleFocus, { capture: true, passive: true });\n\n      return () => target.removeEventListener('focus', handleFocus);\n    }\n  }, [target]);\n\n  debug(() => [\n    [`%cRender%c: Render`, ...styleConsole('cyan', '')],\n    {\n      animateTo,\n      animating: animateTo !== null,\n      sticky,\n      target\n    }\n  ]);\n\n  return (\n    <InternalContext.Provider value={internalContext}>\n      <FunctionContext.Provider value={functionContext}>\n        <StateContext.Provider value={combinedStateContext}>\n          <State1Context.Provider value={state1Context}>\n            <State2Context.Provider value={state2Context}>\n              {children}\n              {target && <EventSpy debounce={debounce} name=\"scroll\" onEvent={handleScroll} target={target} />}\n              {target && animateTo !== null && (\n                <SpineTo name=\"scrollTop\" onEnd={handleSpineToEnd} target={target} value={animateTo} />\n              )}\n            </State2Context.Provider>\n          </State1Context.Provider>\n        </StateContext.Provider>\n      </FunctionContext.Provider>\n    </InternalContext.Provider>\n  );\n};\n\nComposer.defaultProps = {\n  checkInterval: 100,\n  children: undefined,\n  debounce: 17,\n  debug: undefined,\n  initialScrollBehavior: 'smooth',\n  mode: undefined,\n  nonce: undefined,\n  scroller: DEFAULT_SCROLLER\n};\n\nComposer.propTypes = {\n  checkInterval: PropTypes.number,\n  children: PropTypes.any,\n  debounce: PropTypes.number,\n  debug: PropTypes.bool,\n  initialScrollBehavior: PropTypes.oneOf(['auto', 'smooth']),\n  mode: PropTypes.oneOf(['bottom', 'top']),\n  nonce: PropTypes.string,\n  scroller: PropTypes.func\n};\n\nexport default Composer;\n"]},"metadata":{},"sourceType":"module"}