{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs3/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime-corejs3/helpers/toConsumableArray\";\nimport _concatInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/concat\";\nimport _Array$isArray from \"@babel/runtime-corejs3/core-js-stable/array/is-array\";\nimport _forEachInstanceProperty from \"@babel/runtime-corejs3/core-js-stable/instance/for-each\";\n/* eslint no-console: [\"off\"] */\n\nimport styleConsole from './styleConsole';\n\nfunction format(category, arg0) {\n  var _context, _context2;\n\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  return _concatInstanceProperty(_context = [_concatInstanceProperty(_context2 = \"%c\".concat(category, \"%c \")).call(_context2, arg0)]).call(_context, _toConsumableArray(styleConsole('green', 'white')), args);\n}\n\nexport default function debug(category) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$force = _ref.force,\n      force = _ref$force === void 0 ? false : _ref$force;\n\n  if (!force) {\n    return function () {\n      return 0;\n    };\n  }\n\n  return function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (!args.length) {\n      return;\n    }\n\n    var _args = args,\n        _args2 = _slicedToArray(_args, 1),\n        arg0 = _args2[0];\n\n    if (typeof arg0 === 'function') {\n      args = arg0();\n    }\n\n    var lines = _Array$isArray(args[0]) ? args : [args];\n    var oneLiner = lines.length === 1;\n\n    _forEachInstanceProperty(lines).call(lines, function (line, index) {\n      if (oneLiner) {\n        var _console, _context3;\n\n        (_console = console).log.apply(_console, _toConsumableArray(format.apply(void 0, _concatInstanceProperty(_context3 = [category]).call(_context3, _toConsumableArray(line)))));\n      } else if (index) {\n        var _console2;\n\n        (_console2 = console).log.apply(_console2, _toConsumableArray(_Array$isArray(line) ? line : [line]));\n      } else {\n        var _console3, _context4;\n\n        (_console3 = console).groupCollapsed.apply(_console3, _toConsumableArray(format.apply(void 0, _concatInstanceProperty(_context4 = [category]).call(_context4, _toConsumableArray(line)))));\n      }\n    });\n\n    oneLiner || console.groupEnd();\n  };\n}","map":{"version":3,"mappings":";;;;;AAAA;;AAEA,OAAOA,YAAP,MAAyB,gBAAzB;;AAEA,SAASC,MAAT,CAAgBC,QAAhB,EAA0BC,IAA1B,EAAyC;EAAA;;EAAA,kCAANC,IAAM;IAANA,IAAM,UAANA,GAAMC,eAAND;EAAM;;EACvC,2FAAaF,QAAb,0BAA2BC,IAA3B,sCAAsCH,YAAY,CAAC,OAAD,EAAU,OAAV,CAAlD,GAAyEI,IAAzE;AACD;;AAED,eAAe,SAASE,KAAT,CAAeJ,QAAf,EAAiD;EAAA,+EAAJ,EAAI;EAAA,sBAAtBK,KAAsB;EAAA,IAAtBA,KAAsB,2BAAd,KAAc;;EAC9D,IAAI,CAACA,KAAL,EAAY;IACV,OAAO;MAAA,OAAM,CAAN;IAAP;EACD;;EAED,OAAO,YAAa;IAAA,mCAATH,IAAS;MAATA,IAAS,OAATA,GAASC,gBAATD;IAAS;;IAClB,IAAI,CAACA,IAAI,CAACI,MAAV,EAAkB;MAChB;IACD;;IAED,YAAeJ,IAAf;IAAA;IAAA,IAAOD,IAAP;;IAEA,IAAI,OAAOA,IAAP,KAAgB,UAApB,EAAgC;MAC9BC,IAAI,GAAGD,IAAI,EAAXC;IACD;;IAED,IAAMK,KAAK,GAAGC,eAAcN,IAAI,CAAC,CAAD,CAAlB,IAAyBA,IAAzB,GAAgC,CAACA,IAAD,CAA9C;IACA,IAAMO,QAAQ,GAAGF,KAAK,CAACD,MAANC,KAAiB,CAAlC;;IAEAG,gCAAKC,IAAL,QAAc,UAACC,IAAD,EAAOC,KAAP,EAAiB;MAC7B,IAAIJ,QAAJ,EAAc;QAAA;;QACZ,qBAAQK,GAAR,oCAAef,MAAM,MAANA,8CAAOC,QAAP,sCAAoBY,IAApB,GAAf;MADF,OAEO,IAAIC,KAAJ,EAAW;QAAA;;QAChB,sBAAQC,GAAR,qCAAgBN,eAAcI,IAAd,IAAsBA,IAAtB,GAA6B,CAACA,IAAD,CAA7C;MADK,OAEA;QAAA;;QACL,sBAAQG,cAAR,qCAA0BhB,MAAM,MAANA,8CAAOC,QAAP,sCAAoBY,IAApB,GAA1B;MACD;IAPE,CAAL;;IAUAH,QAAQ,IAAIO,OAAO,CAACC,QAARD,EAAZP;EAxBF;AA0BD","names":["styleConsole","format","category","arg0","args","arguments","debug","force","length","lines","_Array$isArray","oneLiner","_forEachInstanceProperty","call","line","index","log","groupCollapsed","console","groupEnd"],"sources":["D:\\More\\Projects\\Project-Diagonal\\client\\node_modules\\react-scroll-to-bottom\\src\\utils\\debug.js"],"sourcesContent":["/* eslint no-console: [\"off\"] */\n\nimport styleConsole from './styleConsole';\n\nfunction format(category, arg0, ...args) {\n  return [`%c${category}%c ${arg0}`, ...styleConsole('green', 'white'), ...args];\n}\n\nexport default function debug(category, { force = false } = {}) {\n  if (!force) {\n    return () => 0;\n  }\n\n  return (...args) => {\n    if (!args.length) {\n      return;\n    }\n\n    const [arg0] = args;\n\n    if (typeof arg0 === 'function') {\n      args = arg0();\n    }\n\n    const lines = Array.isArray(args[0]) ? args : [args];\n    const oneLiner = lines.length === 1;\n\n    lines.forEach((line, index) => {\n      if (oneLiner) {\n        console.log(...format(category, ...line));\n      } else if (index) {\n        console.log(...(Array.isArray(line) ? line : [line]));\n      } else {\n        console.groupCollapsed(...format(category, ...line));\n      }\n    });\n\n    oneLiner || console.groupEnd();\n  };\n}\n"]},"metadata":{},"sourceType":"module"}